# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FLO2DMapCrafter
                                 A QGIS plugin
 This plugin creates maps from FLO-2D output files.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-09-21
        git sha              : $Format:%H$
        copyright            : (C) 2023 by FLO-2D
        email                : contact@flo-2d.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import numpy as np
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtXml import QDomDocument
from osgeo import gdal
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis._core import (
    QgsCoordinateReferenceSystem,
    QgsRasterBandStats,
    QgsColorRampShader,
    QgsRasterShader,
    QgsSingleBandPseudoColorRenderer,
    QgsRasterLayer,
    QgsProject,
    QgsVectorLayer,
    QgsUnitTypes,
    QgsPrintLayout,
    QgsReadWriteContext,
    QgsMessageLog,
)

from .mapping.flood import FloodMaps
from .mapping.mudflow import MudflowMaps
from .mapping.twophase import TwophaseMaps
from .resources import *
from .flo2d_mapcrafter_dialog import FLO2DMapCrafterDialog
import os.path
import processing


class FLO2DMapCrafter:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.dlg = FLO2DMapCrafterDialog()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "FLO2DMapCrafter_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&FLO-2D MapCrafter ")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Adjust CRS
        self.crs = QgsCoordinateReferenceSystem(QgsProject.instance().crs().authid())

        # Select export folder
        self.dlg.flo2d_out_folder.fileChanged.connect(self.check_files)

        # Run Button
        self.dlg.runButton.clicked.connect(self.run_map_creator)

        # Cancel Button
        self.dlg.cancelButton.clicked.connect(self.closeDialog)

        # Check all available maps
        self.dlg.check_cw_cb.stateChanged.connect(self.check_cw)
        self.dlg.check_mf_cb.stateChanged.connect(self.check_mf)
        self.dlg.check_tp_cb.stateChanged.connect(self.check_tp)

        # DEBUG Map layouts
        # self.dlg.map_title_le.setText("Mudflow")
        # self.dlg.map_description.setPlainText(
        #     "This map is a visual representation of the areas that are likely to be submerged or covered by floodwaters during a specific flood event."
        # )

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("FLO2DMapCrafter", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/flo2d_mapcrafter/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("FLO-2D MapCrafter"),
            callback=self.open,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&FLO-2D MapCrafter "), action)
            self.iface.removeToolBarIcon(action)

    # Opening the dialog
    def open(self):
        """Shows the dialog"""

        # Adjust the CRS
        self.crs = QgsCoordinateReferenceSystem(QgsProject.instance().crs().authid())
        self.dlg.crsselector.setCrs(self.crs)

        # Set the grid layer as extent, if it exists
        layer = QgsProject.instance().mapLayersByName("Grid")
        if layer:
            # Add the layer to the QgsMapLayerComboBox
            self.dlg.layer_extent_cb.setLayer(layer[0])

        self.dlg.show()

    def closeDialog(self):
        """Closes the Dialog"""
        checkboxes = [
            self.dlg.hr_cb,
            self.dlg.fs_cb,
            self.dlg.fd_cb,
            self.dlg.ft_cb,
            self.dlg.fe_cb,
            self.dlg.me_cb,
            self.dlg.md_cb,
            self.dlg.ms_cb,
            self.dlg.mt_cb,
            self.dlg.ce_cb,
            self.dlg.ct_cb,
            self.dlg.cfe_cb,
            self.dlg.cfd_cb,
            self.dlg.cfs_cb,
            self.dlg.cfe_cb,
            self.dlg.cfd_cb,
            self.dlg.cfs_cb,
            self.dlg.cme_cb,
            self.dlg.cmd_cb,
            self.dlg.cms_cb,
        ]
        for checkBox in checkboxes:
            checkBox.setChecked(False)

        self.dlg.close()

    def check_files(self):
        """Function to check the type of files present on the simulation"""

        # check if simulation was run
        files_in_directory = os.listdir(self.dlg.flo2d_out_folder.filePath())

        # In future version, calculate the Cell size from the DEPTH.OUT file
        if "DEPTH.OUT" in files_in_directory and "CONT.DAT" in files_in_directory:
            self.dlg.runButton.setEnabled(True)
            self.dlg.label_2.setEnabled(True)
            self.dlg.mapper_out_folder.setEnabled(True)
            self.dlg.tab4.setEnabled(True)
        else:
            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setWindowTitle("Warning")
            msg_box.setText("No CONT.DAT and *.OUT files were found in this directory!")
            msg_box.exec_()
            return

        output_directory = self.dlg.flo2d_out_folder.filePath()

        with open(output_directory + r"\CONT.DAT", "r") as file:
            lines = file.readlines()
            elements = lines[2].split()
            mud_switch = elements[3]
            file.close()

        # Flood simulation
        if mud_switch == "0":
            self.dlg.tab1.setEnabled(True)
            self.dlg.tab2.setEnabled(False)
            self.dlg.tab3.setEnabled(False)
            self.dlg.tabs.setCurrentIndex(0)

            flood_maps = FloodMaps()
            flood_files_dict = flood_maps.check_flood_files(output_directory)

            flood_rbs = {
                r"TOPO.DAT": self.dlg.ge_cw_cb,
                r"DEPTH.OUT": self.dlg.md_cw_cb,
                r"VELFP.OUT": self.dlg.mv_cw_cb,
                r"MAXWSELEV.OUT": self.dlg.mwse_cw_cb,
                r"FINALDEP.OUT": self.dlg.fd_cw_cb,
                r"FINALVEL.OUT": self.dlg.fv_cw_cb,
                r"VEL_X_DEPTH.OUT": self.dlg.dv_cw_cb,
                r"TIMEONEFT.OUT": self.dlg.t1ft_cw_cb,
                r"TIMETWOFT.OUT": self.dlg.t2ft_cw_cb,
                r"TIMETOPEAK.OUT": self.dlg.tmax_cw_cb,
                r"DEPCH.OUT": self.dlg.cd_cw_cb,
                r"VELOC.OUT": self.dlg.cv_cw_cb,
                r"VELCHFINAL.OUT": self.dlg.fcv_cw_cb,
                r"DEPCHFINAL.OUT": self.dlg.fcd_cw_cb,
                r"LEVEEDEFIC.OUT": self.dlg.ld_cw_cb,
                r"SPECENERGY.OUT": self.dlg.se_cw_cb,
                r"STATICPRESS.OUT": self.dlg.sp_cw_cb,
            }

            for key, value in flood_files_dict.items():
                if value:
                    flood_rbs[key].setEnabled(True)
                else:
                    flood_rbs[key].setEnabled(False)

        # Mudflow simulation
        if mud_switch == "1":
            self.dlg.tab1.setEnabled(False)
            self.dlg.tab2.setEnabled(True)
            self.dlg.tab3.setEnabled(False)
            self.dlg.tabs.setCurrentIndex(1)

            mudflow_maps = MudflowMaps()
            mudflow_files_dict = mudflow_maps.check_mudflow_files(output_directory)

            mudflow_rbs = {
                r"TOPO.DAT": self.dlg.ge_mf_cb,
                r"DEPTH.OUT": self.dlg.md_mf_cb,
                r"VELFP.OUT": self.dlg.mv_mf_cb,
                r"MAXWSELEV.OUT": self.dlg.mwse_mf_cb,
                r"FINALDEP.OUT": self.dlg.fd_mf_cb,
                r"FINALVEL.OUT": self.dlg.fv_mf_cb,
                r"VEL_X_DEPTH.OUT": self.dlg.dv_mf_cb,
                r"TIMEONEFT.OUT": self.dlg.t1ft_mf_cb,
                r"TIMETWOFT.OUT": self.dlg.t2ft_mf_cb,
                r"TIMETOPEAK.OUT": self.dlg.tmax_mf_cb,
                r"DEPCH.OUT": self.dlg.cd_mf_cb,
                r"VELOC.OUT": self.dlg.cv_mf_cb,
                r"VELCHFINAL.OUT": self.dlg.fcv_mf_cb,
                r"DEPCHFINAL.OUT": self.dlg.fcd_mf_cb,
                r"LEVEEDEFIC.OUT": self.dlg.ld_mf_cb,
                r"SPECENERGY.OUT": self.dlg.se_mf_cb,
                r"STATICPRESS.OUT": self.dlg.sp_mf_cb,
                r"CVFPMAX.OUT": self.dlg.ms_mf_cb,
                r"FINALCVFP.OUT": self.dlg.fs_mf_cb,
            }

            for key, value in mudflow_files_dict.items():
                if value:
                    mudflow_rbs[key].setEnabled(True)
                else:
                    mudflow_rbs[key].setEnabled(False)

        # Two-phase simulation
        if mud_switch == "2":
            self.dlg.tab1.setEnabled(False)
            self.dlg.tab2.setEnabled(False)
            self.dlg.tab3.setEnabled(True)
            self.dlg.tabs.setCurrentIndex(2)

            twophase_maps = TwophaseMaps()
            twophase_files_dict = twophase_maps.check_twophase_files(output_directory)

            twophase_rbs = {
                r"TOPO.DAT": self.dlg.ge_tp_cb,
                r"DEPTH.OUT": self.dlg.mfd_tp_cb,
                r"DEPFPMAX_MUD.OUT": self.dlg.mmd_tp_cb,
                r"DEPTHMAX_2PHASE_COMBINED.OUT": self.dlg.cmd_tp_cb,
                r"VELFP.OUT": self.dlg.mfv_tp_cb,
                r"VELFP_MUD.OUT": self.dlg.mmv_tp_cb,
                r"CVFPMAX.OUT": self.dlg.mfsc_tp_cb,
                r"CVFPMAX_MUD.OUT": self.dlg.mmsc_tp_cb,
                #r"FINALCVFP.OUT": self.dlg.ffsc_tp_cb,
                r"FINALCVFP_MUD.OUT": self.dlg.fmsc_tp_cb,
                #r"MAXWSELEV.OUT": self.dlg.mwse_mf_cb,
                r"FINALDEP.OUT": self.dlg.ffd_tp_cb,
                r"FINALDEP_MUD.OUT": self.dlg.fmd_tp_cb,
                r"FINALDEP_COMBO.OUT": self.dlg.fcd_tp_cb,
                r"FINALVEL.OUT": self.dlg.ffv_tp_cb,
                r"FINALVEL_MUD.OUT": self.dlg.fmv_tp_cb,
                r"VEL_X_DEPTH.OUT": self.dlg.dv_tp_cb,
                r"TIMEONEFT.OUT": self.dlg.t1ft_tp_cb,
                r"TIMETWOFT.OUT": self.dlg.t2ft_tp_cb,
                r"TIMETOPEAK.OUT": self.dlg.tmax_tp_cb,
                r"DEPCH.OUT": self.dlg.mchd_tp_cb,
                r"VELOC.OUT": self.dlg.mchv_tp_cb,
                r"VELCHFINAL.OUT": self.dlg.fchv_tp_cb,
                r"DEPCHFINAL.OUT": self.dlg.fchd_tp_cb,
                r"LEVEEDEFIC.OUT": self.dlg.ld_tp_cb,
                r"SPECENERGY.OUT": self.dlg.se_tp_cb,
                r"STATICPRESS.OUT": self.dlg.sp_tp_cb,
            }

            for key, value in twophase_files_dict.items():
                if value:
                    twophase_rbs[key].setEnabled(True)
                else:
                    twophase_rbs[key].setEnabled(False)
    def run_map_creator(self):
        """Run method that performs all the real work"""

        # input & output directories
        flo2d_results_dir = self.dlg.flo2d_out_folder.filePath()
        map_output_dir = self.dlg.mapper_out_folder.filePath()
        self.crs = self.dlg.crsselector.crs()

        if not self.check_input(map_output_dir, "Please, select the output folder."):
            return
        #
        # if not self.check_checkboxes():
        #     return

        with open(flo2d_results_dir + r"\CONT.DAT", "r") as file:
            lines = file.readlines()
            elements = lines[2].split()
            mud_switch = elements[3]
            file.close()

        """
        GROUPS CREATION
        """

        root = QgsProject.instance().layerTreeRoot()

        mapping_group_name = "FLO-2D MapCrafter"
        if root.findGroup(mapping_group_name):
            mapping_group = root.findGroup(mapping_group_name)
        else:
            mapping_group = root.insertGroup(0, mapping_group_name)

        """        
        FLOOD MAPS        
        """

        if mud_switch == "0":
            flood_rbs = {
                r"TOPO.DAT": self.dlg.ge_cw_cb.isChecked(),
                r"DEPTH.OUT": self.dlg.md_cw_cb.isChecked(),
                r"VELFP.OUT": self.dlg.mv_cw_cb.isChecked(),
                r"MAXWSELEV.OUT": self.dlg.mwse_cw_cb.isChecked(),
                r"FINALDEP.OUT": self.dlg.fd_cw_cb.isChecked(),
                r"FINALVEL.OUT": self.dlg.fv_cw_cb.isChecked(),
                r"VEL_X_DEPTH.OUT": self.dlg.dv_cw_cb.isChecked(),
                r"TIMEONEFT.OUT": self.dlg.t1ft_cw_cb.isChecked(),
                r"TIMETWOFT.OUT": self.dlg.t2ft_cw_cb.isChecked(),
                r"TIMETOPEAK.OUT": self.dlg.tmax_cw_cb.isChecked(),
                r"DEPCH.OUT": self.dlg.cd_cw_cb.isChecked(),
                r"VELOC.OUT": self.dlg.cv_cw_cb.isChecked(),
                r"VELCHFINAL.OUT": self.dlg.fcv_cw_cb.isChecked(),
                r"DEPCHFINAL.OUT": self.dlg.fcd_cw_cb.isChecked(),
                r"LEVEEDEFIC.OUT": self.dlg.ld_cw_cb.isChecked(),
                r"SPECENERGY.OUT": self.dlg.se_cw_cb.isChecked(),
                r"STATICPRESS.OUT": self.dlg.sp_cw_cb.isChecked(),
            }

            flood_maps = FloodMaps()
            flood_maps.create_maps(
                flood_rbs, flo2d_results_dir, map_output_dir, mapping_group, self.crs
            )

        if mud_switch == "1":
            mudflow_rbs = {
                r"TOPO.DAT": self.dlg.ge_mf_cb.isChecked(),
                r"DEPTH.OUT": self.dlg.md_mf_cb.isChecked(),
                r"VELFP.OUT": self.dlg.mv_mf_cb.isChecked(),
                r"MAXWSELEV.OUT": self.dlg.mwse_mf_cb.isChecked(),
                r"FINALDEP.OUT": self.dlg.fd_mf_cb.isChecked(),
                r"FINALVEL.OUT": self.dlg.fv_mf_cb.isChecked(),
                r"VEL_X_DEPTH.OUT": self.dlg.dv_mf_cb.isChecked(),
                r"TIMEONEFT.OUT": self.dlg.t1ft_mf_cb.isChecked(),
                r"TIMETWOFT.OUT": self.dlg.t2ft_mf_cb.isChecked(),
                r"TIMETOPEAK.OUT": self.dlg.tmax_mf_cb.isChecked(),
                r"DEPCH.OUT": self.dlg.cd_mf_cb.isChecked(),
                r"VELOC.OUT": self.dlg.cv_mf_cb.isChecked(),
                r"VELCHFINAL.OUT": self.dlg.fcv_mf_cb.isChecked(),
                r"DEPCHFINAL.OUT": self.dlg.fcd_mf_cb.isChecked(),
                r"LEVEEDEFIC.OUT": self.dlg.ld_mf_cb.isChecked(),
                r"SPECENERGY.OUT": self.dlg.se_mf_cb.isChecked(),
                r"STATICPRESS.OUT": self.dlg.sp_mf_cb.isChecked(),
                r"CVFPMAX.OUT": self.dlg.ms_mf_cb.isChecked(),
                r"FINALCVFP.OUT": self.dlg.fs_mf_cb.isChecked(),
            }

            mudflow_maps = MudflowMaps()
            mudflow_maps.create_maps(
                mudflow_rbs, flo2d_results_dir, map_output_dir, mapping_group, self.crs
            )

        if mud_switch == "2":
            twophase_rbs = {
                r"TOPO.DAT": self.dlg.ge_tp_cb.isChecked(),
                r"DEPTH.OUT": self.dlg.mfd_tp_cb.isChecked(),
                r"DEPFPMAX_MUD.OUT": self.dlg.mmd_tp_cb.isChecked(),
                r"DEPTHMAX_2PHASE_COMBINED.OUT": self.dlg.cmd_tp_cb.isChecked(),
                r"VELFP.OUT": self.dlg.mfv_tp_cb.isChecked(),
                r"VELFP_MUD.OUT": self.dlg.mmv_tp_cb.isChecked(),
                r"CVFPMAX.OUT": self.dlg.mfsc_tp_cb.isChecked(),
                r"CVFPMAX_MUD.OUT": self.dlg.mmsc_tp_cb.isChecked(),
                # r"FINALCVFP.OUT": self.dlg.ffsc_tp_cb,
                r"FINALCVFP_MUD.OUT": self.dlg.fmsc_tp_cb.isChecked(),
                # r"MAXWSELEV.OUT": self.dlg.mwse_mf_cb,
                r"FINALDEP.OUT": self.dlg.ffd_tp_cb.isChecked(),
                r"FINALDEP_MUD.OUT": self.dlg.fmd_tp_cb.isChecked(),
                r"FINALDEP_COMBO.OUT": self.dlg.fcd_tp_cb.isChecked(),
                r"FINALVEL.OUT": self.dlg.ffv_tp_cb.isChecked(),
                r"FINALVEL_MUD.OUT": self.dlg.fmv_tp_cb.isChecked(),
                r"VEL_X_DEPTH.OUT": self.dlg.dv_tp_cb.isChecked(),
                r"TIMEONEFT.OUT": self.dlg.t1ft_tp_cb.isChecked(),
                r"TIMETWOFT.OUT": self.dlg.t2ft_tp_cb.isChecked(),
                r"TIMETOPEAK.OUT": self.dlg.tmax_tp_cb.isChecked(),
                r"DEPCH.OUT": self.dlg.mchd_tp_cb.isChecked(),
                r"VELOC.OUT": self.dlg.mchv_tp_cb.isChecked(),
                r"VELCHFINAL.OUT": self.dlg.fchv_tp_cb.isChecked(),
                r"DEPCHFINAL.OUT": self.dlg.fchd_tp_cb.isChecked(),
                r"LEVEEDEFIC.OUT": self.dlg.ld_tp_cb.isChecked(),
                r"SPECENERGY.OUT": self.dlg.se_tp_cb.isChecked(),
                r"STATICPRESS.OUT": self.dlg.sp_tp_cb.isChecked(),
            }

            twophase_maps = TwophaseMaps()
            twophase_maps.create_maps(
                twophase_rbs, flo2d_results_dir, map_output_dir, mapping_group, self.crs
            )

        if self.dlg.fe_cb.isChecked():
            flood_extent_raster = map_output_dir + r"\FLOOD_EXTENT.tif"
            flood_extent_vector = map_output_dir + r"\FLOOD_EXTENT.shp"
            depth_file = flo2d_results_dir + r"\DEPTH.OUT"

            self.remove_layer("FLOOD_EXTENT")

            files = os.listdir(map_output_dir)
            for file in files:
                if file.startswith("FLOOD_EXTENT"):
                    file_path = os.path.join(map_output_dir, file)
                    os.remove(file_path)

            raster = self.read_ASCII(
                depth_file, flood_extent_raster, "FLOOD_EXTENT_RASTER"
            )

            flood_extent = self.get_extent(raster, flood_extent_vector, "FLOOD_EXTENT")

            QgsProject.instance().addMapLayer(flood_extent, False)
            self.set_vector_style(flood_extent, 0)

            mapping_group.findGroup("Flood Maps").insertLayer(0, flood_extent)
            mapping_group.removeLayer(flood_extent)
            root.removeLayer(flood_extent)

        if self.dlg.ft_cb.isChecked():
            flood_time = map_output_dir + r"\FLOOD_TIMEONEFT.tif"
            time_file = flo2d_results_dir + r"\TIMEONEFT.OUT"

            raster = self.read_ASCII(time_file, flood_time, "TIMEONEFT")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 3)

            mapping_group.findGroup("Flood Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        if self.dlg.fd_cb.isChecked():
            flood_depth = map_output_dir + r"\FLOOD_DEPTH.tif"
            depth_file = flo2d_results_dir + r"\DEPTH.OUT"

            raster = self.read_ASCII(depth_file, flood_depth, "FLOOD_DEPTH")
            QgsProject.instance().addMapLayer(raster, False)

            self.set_raster_style(raster, 0)

            mapping_group.findGroup("Flood Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        if self.dlg.fs_cb.isChecked():
            flow_speed = map_output_dir + r"\FLOW_SPEED.tif"
            vel_file = flo2d_results_dir + r"\VELFP.OUT"

            raster = self.read_ASCII(vel_file, flow_speed, "FLOW_SPEED")
            QgsProject.instance().addMapLayer(raster, False)

            self.set_raster_style(raster, 1)

            mapping_group.findGroup("Flood Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        """
        HYDRODYNAMIC RISK MAPS
        """

        if self.dlg.hr_cb.isChecked():
            hydro_risk = map_output_dir + r"\HYDRODYNAMIC_RISK.tif"
            depth_file = flo2d_results_dir + r"\DEPTH.OUT"
            vel_file = flo2d_results_dir + r"\VELFP.OUT"
            vel_x_depth_file = flo2d_results_dir + r"\VEL_X_DEPTH.OUT"

            hydro_risk_raster = self.create_hydro_risk(
                map_output_dir, hydro_risk, depth_file, vel_file, vel_x_depth_file
            )

            QgsProject.instance().addMapLayer(hydro_risk_raster, False)
            self.set_raster_style(hydro_risk_raster, 2)

            mapping_group.findGroup("Risk Maps").insertLayer(0, hydro_risk_raster)
            mapping_group.removeLayer(hydro_risk_raster)
            root.removeLayer(hydro_risk_raster)

        """"
        MUDFLOW MAPS
        """

        if self.dlg.me_cb.isChecked():
            mud_extent_raster = map_output_dir + r"\MUDFLOW_EXTENT.tif"
            mud_extent_vector = map_output_dir + r"\MUDFLOW_EXTENT.shp"
            depth_file = flo2d_results_dir + r"\DEPTH.OUT"

            self.remove_layer("MUDFLOW")

            files = os.listdir(map_output_dir)
            for file in files:
                if file.startswith("MUDFLOW"):
                    file_path = os.path.join(map_output_dir, file)
                    os.remove(file_path)

            raster = self.read_ASCII(
                depth_file, mud_extent_raster, "MUDFLOW_EXTENT_RASTER"
            )

            mud_extent = self.get_extent(raster, mud_extent_vector, "MUDFLOW_EXTENT")

            QgsProject.instance().addMapLayer(mud_extent, False)
            self.set_vector_style(mud_extent, 0)

            mapping_group.findGroup("Mudflow Maps").insertLayer(0, mud_extent)
            mapping_group.removeLayer(mud_extent)
            root.removeLayer(mud_extent)

        if self.dlg.md_cb.isChecked():
            mud_depth = map_output_dir + r"\MUDFLOW_DEPTH.tif"
            depth_file = flo2d_results_dir + r"\DEPTH.OUT"

            raster = self.read_ASCII(depth_file, mud_depth, "MUDFLOW_DEPTH")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 5)

            mapping_group.findGroup("Mudflow Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        if self.dlg.ms_cb.isChecked():
            mud_speed = map_output_dir + r"\MUDFLOW_SPEED.tif"
            vel_file = flo2d_results_dir + r"\VELFP.OUT"

            raster = self.read_ASCII(vel_file, mud_speed, "MUDFLOW_SPEED")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 1)

            mapping_group.findGroup("Mudflow Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        if self.dlg.mt_cb.isChecked():
            mud_time = map_output_dir + r"\MUDFLOW_TIMEONEFT.tif"
            time_file = flo2d_results_dir + r"\TIMEONEFT.OUT"

            raster = self.read_ASCII(time_file, mud_time, "MUDFLOW_TIMEONEFT")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 3)

            mapping_group.findGroup("Mudflow Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        """"
        TWO-PHASE MAPS
        """

        if self.dlg.ce_cb.isChecked():
            combined_extent_raster = map_output_dir + r"\TWO-PHASE_EXTENT.tif"
            combined_extent_vector = map_output_dir + r"\TWO-PHASE_EXTENT.shp"
            depth_file = flo2d_results_dir + r"\DEPTHMAX_2PHASE_COMBINED.OUT"

            self.remove_layer("TWO-PHASE_EXTENT")

            files = os.listdir(map_output_dir)
            for file in files:
                if file.startswith("TWO-PHASE_EXTENT"):
                    file_path = os.path.join(map_output_dir, file)
                    os.remove(file_path)

            raster = self.read_ASCII(
                depth_file, combined_extent_raster, "TWO-PHASE_EXTENT"
            )

            combined_extent = self.get_extent(
                raster, combined_extent_vector, "TWO-PHASE_EXTENT"
            )

            QgsProject.instance().addMapLayer(combined_extent, False)
            self.set_vector_style(combined_extent, 0)

            mapping_group.findGroup("Two-phase Maps").insertLayer(0, combined_extent)
            mapping_group.removeLayer(combined_extent)
            root.removeLayer(combined_extent)

        if self.dlg.ct_cb.isChecked():
            twophase_time = map_output_dir + r"\TWO-PHASE_TIMEONEFT.tif"
            time_file = flo2d_results_dir + r"\TIMEONEFT.OUT"

            raster = self.read_ASCII(time_file, twophase_time, "TWO-PHASE_TIMEONEFT")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 3)

            mapping_group.findGroup("Two-phase Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        if self.dlg.cfe_cb.isChecked():
            flood_extent_raster = map_output_dir + r"\FLOOD_EXTENT.tif"
            flood_extent_vector = map_output_dir + r"\FLOOD_EXTENT.shp"
            depth_file = flo2d_results_dir + r"\DEPTH.OUT"

            self.remove_layer("FLOOD_EXTENT")

            files = os.listdir(map_output_dir)
            for file in files:
                if file.startswith("FLOOD_EXTENT"):
                    file_path = os.path.join(map_output_dir, file)
                    os.remove(file_path)

            raster = self.read_ASCII(depth_file, flood_extent_raster, "FLOOD_EXTENT")

            combined_extent = self.get_extent(
                raster, flood_extent_vector, "FLOOD_EXTENT"
            )

            QgsProject.instance().addMapLayer(combined_extent, False)
            self.set_vector_style(combined_extent, 1)

            mapping_group.findGroup("Two-phase Maps").insertLayer(0, combined_extent)
            mapping_group.removeLayer(combined_extent)
            root.removeLayer(combined_extent)

        if self.dlg.cfd_cb.isChecked():
            flood_depth = map_output_dir + r"\FLOOD_DEPTH.tif"
            depth_file = flo2d_results_dir + r"\DEPTH.OUT"

            raster = self.read_ASCII(depth_file, flood_depth, "FLOOD_DEPTH")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 0)

            mapping_group.findGroup("Two-phase Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        if self.dlg.cfs_cb.isChecked():
            flow_speed = map_output_dir + r"\FLOW_SPEED.tif"
            vel_file = flo2d_results_dir + r"\VELFP.OUT"

            raster = self.read_ASCII(vel_file, flow_speed, "FLOW_SPEED")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 1)

            mapping_group.findGroup("Two-phase Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        if self.dlg.cme_cb.isChecked():
            mud_extent_raster = map_output_dir + r"\MUDFLOW_EXTENT.tif"
            mud_extent_vector = map_output_dir + r"\MUDFLOW_EXTENT.shp"
            depth_file = flo2d_results_dir + r"\DEPFPMAX_MUD.OUT"

            self.remove_layer("MUDFLOW_EXTENT")

            files = os.listdir(map_output_dir)
            for file in files:
                if file.startswith("MUDFLOW_EXTENT"):
                    file_path = os.path.join(map_output_dir, file)
                    os.remove(file_path)

            raster = self.read_ASCII(depth_file, mud_extent_raster, "MUDFLOW_EXTENT")

            combined_extent = self.get_extent(
                raster, mud_extent_vector, "MUDFLOW_EXTENT"
            )

            QgsProject.instance().addMapLayer(combined_extent, False)
            self.set_vector_style(combined_extent, 2)

            mapping_group.findGroup("Two-phase Maps").insertLayer(0, combined_extent)
            mapping_group.removeLayer(combined_extent)
            root.removeLayer(combined_extent)

        if self.dlg.cmd_cb.isChecked():
            mud_depth = map_output_dir + r"\MUDFLOW_DEPTH.tif"
            depth_file = flo2d_results_dir + r"\DEPFPMAX_MUD.OUT"

            raster = self.read_ASCII(depth_file, mud_depth, "MUDFLOW_DEPTH")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 5)

            mapping_group.findGroup("Two-phase Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        if self.dlg.cms_cb.isChecked():
            mud_speed = map_output_dir + r"\MUDFLOW_SPEED.tif"
            vel_file = flo2d_results_dir + r"\VELFP_MUD.OUT"

            raster = self.read_ASCII(vel_file, mud_speed, "MUDFLOW_SPEED")

            QgsProject.instance().addMapLayer(raster, False)
            self.set_raster_style(raster, 1)

            mapping_group.findGroup("Two-phase Maps").insertLayer(0, raster)
            mapping_group.removeLayer(raster)
            root.removeLayer(raster)

        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setWindowTitle("Mapping complete!")
        msg_box.setText("The selected maps were created and added to the Map Canvas.")
        msg_box.exec_()

        self.closeDialog()

    def set_raster_style(self, layer, style):
        """Define the raster styles"""
        colDic = {
            "white": "#ffffff",
            "lightblue": "#9ecae1",
            "blue": "#4292c6",
            "darkblue": "#08306b",
            "lightgreen": "#a1d99b",
            "green": "#41ab5d",
            "darkgreen": "#006d2c",
            "black": "#000000",
            "grey": "#808080",
            "red": "#FF0000",
            "yellow": "#FFFF00",
            "risk_red": "#FF0000",
            "risk_orange": "#FFC000",
            "risk_lightgreen": "#92D050",
            "risk_green": "#006600",
            "risk_lightblue": "#BDD6EE",
            "risk_blue": "#0033CC",
            "mud_lightbrown": "#be4d24",
            "mud_brown": "#752c12",
            "mud_darkbrown": "#2c0c00",
        }

        provider = layer.dataProvider()
        extent = layer.extent()

        script_directory = os.path.dirname(os.path.realpath(__file__))
        style_directory = script_directory + r"/raster_styles"

        # Hydrodynamic Risk
        if style == 2:
            layer.loadNamedStyle(style_directory + r"/hydro_risk.qml")
        elif style == 3:
            layer.loadNamedStyle(style_directory + r"/timeoneft.qml")
        # Other styles
        else:
            stats = provider.bandStatistics(1, QgsRasterBandStats.All, extent, 0)
            if stats.minimumValue <= 0.001:
                min = 0.001
            else:
                min = stats.minimumValue

            max = stats.maximumValue
            range = max - min
            add = range / 2
            interval = min + add
            valueList = [min, interval, max]

            dep_lst = [
                QgsColorRampShader.ColorRampItem(
                    valueList[0], QColor(colDic["lightblue"])
                ),
                QgsColorRampShader.ColorRampItem(valueList[1], QColor(colDic["blue"])),
                QgsColorRampShader.ColorRampItem(
                    valueList[2], QColor(colDic["darkblue"])
                ),
            ]

            vel_lst = [
                QgsColorRampShader.ColorRampItem(
                    valueList[0], QColor(colDic["lightgreen"])
                ),
                QgsColorRampShader.ColorRampItem(valueList[1], QColor(colDic["green"])),
                QgsColorRampShader.ColorRampItem(
                    valueList[2], QColor(colDic["darkgreen"])
                ),
            ]

            time_lst = [
                QgsColorRampShader.ColorRampItem(valueList[0], QColor(colDic["green"])),
                QgsColorRampShader.ColorRampItem(
                    valueList[1], QColor(colDic["yellow"])
                ),
                QgsColorRampShader.ColorRampItem(valueList[2], QColor(colDic["red"])),
            ]

            q_lst = [
                QgsColorRampShader.ColorRampItem(valueList[0], QColor(colDic["white"])),
                QgsColorRampShader.ColorRampItem(
                    valueList[1], QColor(colDic["lightblue"])
                ),
                QgsColorRampShader.ColorRampItem(valueList[2], QColor(colDic["blue"])),
            ]

            mud_lst = [
                QgsColorRampShader.ColorRampItem(
                    valueList[0], QColor(colDic["mud_lightbrown"])
                ),
                QgsColorRampShader.ColorRampItem(
                    valueList[1], QColor(colDic["mud_brown"])
                ),
                QgsColorRampShader.ColorRampItem(
                    valueList[2], QColor(colDic["mud_darkbrown"])
                ),
            ]

            style_dict = {
                0: dep_lst,
                1: vel_lst,
                5: mud_lst,
                3: time_lst,
                4: q_lst,
            }

            myRasterShader = QgsRasterShader()
            myColorRamp = QgsColorRampShader(minimumValue=min, maximumValue=max)

            myColorRamp.setColorRampItemList(style_dict[style])
            myColorRamp.setColorRampType(QgsColorRampShader.Interpolated)
            myColorRamp.setClip(True)

            myRasterShader.setRasterShaderFunction(myColorRamp)

            myPseudoRenderer = QgsSingleBandPseudoColorRenderer(
                layer.dataProvider(), layer.type(), myRasterShader
            )

            layer.setRenderer(myPseudoRenderer)

        layer.triggerRepaint()

    def set_vector_style(self, layer, style):
        """Define the vector styles"""

        script_directory = os.path.dirname(os.path.realpath(__file__))
        style_directory = script_directory + r"/vector_styles"

        # Extent red
        if style == 0:
            layer.loadNamedStyle(style_directory + r"/extent.qml")

        # Extent blue
        if style == 1:
            layer.loadNamedStyle(style_directory + r"/fluid_extent.qml")

        # Extent brown
        if style == 2:
            layer.loadNamedStyle(style_directory + r"/mud_extent.qml")

    def create_hydro_risk(
        self, map_output_dir, hydro_risk, depth_file, vel_file, vel_x_depth_file
    ):
        """Create the hydrodynamic risk map"""

        # Check flood depth and flow speed files
        flow_speed = map_output_dir + r"\FLOW_SPEED.tif"
        flood_depth = map_output_dir + r"\FLOOD_DEPTH.tif"
        h_x_v = map_output_dir + r"\HxV.tif"

        if os.path.isfile(flood_depth):
            try:
                os.remove(flood_depth)
                self.read_ASCII(depth_file, flood_depth, "FLOOD_DEPTH")
            except OSError as e:
                print(f"Error deleting {flood_depth}: {str(e)}")
        else:
            self.read_ASCII(depth_file, flood_depth, "FLOOD_DEPTH")

        if os.path.isfile(flow_speed):
            try:
                os.remove(flow_speed)
                self.read_ASCII(vel_file, flow_speed, "FLOW_SPEED")
            except OSError as e:
                print(f"Error deleting {flow_speed}: {str(e)}")
        else:
            self.read_ASCII(vel_file, flow_speed, "FLOW_SPEED")

        if os.path.isfile(h_x_v):
            try:
                os.remove(h_x_v)
                self.read_ASCII(vel_x_depth_file, h_x_v, "HxV")
            except OSError as e:
                print(f"Error deleting {h_x_v}: {str(e)}")
        else:
            self.read_ASCII(vel_x_depth_file, h_x_v, "HxV")

        if os.path.isfile(hydro_risk):
            try:
                os.remove(hydro_risk)
            except OSError as e:
                print(f"Error deleting {hydro_risk}: {str(e)}")

        self.remove_layer("HYDRODYNAMIC_RISK")

        vel_layer = QgsProject.instance().mapLayersByName("FLOW_SPEED")
        if not vel_layer:
            flow_speed_layer = QgsRasterLayer(flow_speed, "FLOW_SPEED")
            QgsProject.instance().addMapLayer(flow_speed_layer, False)
            self.set_raster_style(flow_speed_layer, 1)
        depth_layer = QgsProject.instance().mapLayersByName("FLOOD_DEPTH")
        if not depth_layer:
            flood_depth_layer = QgsRasterLayer(flood_depth, "FLOOD_DEPTH")
            QgsProject.instance().addMapLayer(flood_depth_layer, False)
            self.set_raster_style(flood_depth_layer, 0)
        hxv_layer = QgsProject.instance().mapLayersByName("HxV")
        if not hxv_layer:
            hxv_layer = QgsRasterLayer(h_x_v, "HxV")
            QgsProject.instance().addMapLayer(hxv_layer, False)

        # adjust units
        if self.crs.mapUnits() == QgsUnitTypes.DistanceMeters:
            uc = 1
        elif self.crs.mapUnits() == QgsUnitTypes.DistanceFeet:
            uc = 3.28
        else:
            QMessageBox.critical(
                self.iface.mainWindow(),
                "Error",
                "Unknown map units. Choose a different projection!",
            )
            return

        r1_e = f'"HxV@1" <= {0.3 * uc} AND "FLOOD_DEPTH@1" < {0.3 * uc} AND "FLOW_SPEED@1" < {2 * uc}'
        r2_e = f'"HxV@1" <= {0.6 * uc} AND "FLOOD_DEPTH@1" < {0.5 * uc} AND "FLOW_SPEED@1" < {2 * uc}'
        r3_e = f'"HxV@1" <= {0.6 * uc} AND "FLOOD_DEPTH@1" < {1.2 * uc} AND "FLOW_SPEED@1" < {2 * uc}'
        r4_e = f'"HxV@1" <= {1.0 * uc} AND "FLOOD_DEPTH@1" < {2.0 * uc} AND "FLOW_SPEED@1" < {2 * uc}'
        r5_e = f'"HxV@1" <= {4.0 * uc} AND "FLOOD_DEPTH@1" < {4.0 * uc} AND "FLOW_SPEED@1" < {4 * uc}'
        r6_e = f'"HxV@1" > {4.0 * uc} OR "FLOOD_DEPTH@1" >= {4.0 * uc} OR "FLOW_SPEED@1" >= {4 * uc}'

        # Australian Rainfall and Runoff Classification
        arr_class = processing.run(
            "qgis:rastercalculator",
            {
                "EXPRESSION": f"IF({r1_e},1,if({r2_e},2,if({r3_e},3,if({r4_e},4,if({r5_e},5,if({r6_e},6,0))))))",
                "LAYERS": [flood_depth],
                "CELLSIZE": 0,
                "EXTENT": None,
                "CRS": self.crs,
                "OUTPUT": hydro_risk,
            },
        )["OUTPUT"]

        self.remove_layer("HxV")

        return QgsRasterLayer(arr_class, "HYDRODYNAMIC_RISK")

    def remove_layer(self, layer_name):
        """Function to remove layer name based on name"""
        for layer in QgsProject.instance().mapLayers().values():
            if layer.name() == layer_name:
                QgsProject.instance().removeMapLayers([layer.id()])

    def get_extent(self, raster, flood_extent_vector, name):
        """Function to get the extent of a raster layer"""
        vectorized = processing.run(
            "gdal:polygonize",
            {
                "INPUT": raster,
                "BAND": 1,
                "FIELD": "DN",
                "EIGHT_CONNECTEDNESS": False,
                "EXTRA": "",
                "OUTPUT": "TEMPORARY_OUTPUT",
            },
        )["OUTPUT"]

        processing.run(
            "native:dissolve",
            {
                "INPUT": vectorized,
                "FIELD": [],
                "SEPARATE_DISJOINT": False,
                "OUTPUT": flood_extent_vector,
            },
        )
        extent = QgsVectorLayer(flood_extent_vector, name)

        return extent

    def check_input(self, text, message):
        """Function to check the input data"""
        if text == "":
            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setWindowTitle("Warning")
            msg_box.setText(message)
            msg_box.exec_()
            return False
        else:
            return True

    # def create_groups(self):
    #     """Function to check if groups were already created and, if not, create the groups"""
    #
    #     root = QgsProject.instance().layerTreeRoot()
    #
    #     mapping_group_name = "FLO-2D MapCrafter"
    #     if root.findGroup(mapping_group_name):
    #         mapping_group = root.findGroup(mapping_group_name)
    #     else:
    #         mapping_group = root.insertGroup(0, mapping_group_name)

        # flood_cbs = [
        #     self.dlg.fs_cb,
        #     self.dlg.fd_cb,
        #     self.dlg.ft_cb,
        #     self.dlg.fe_cb,
        # ]
        #
        # flood_checked = any(checkbox.isChecked() for checkbox in flood_cbs)
        #
        # mud_cbs = [self.dlg.me_cb, self.dlg.md_cb, self.dlg.ms_cb, self.dlg.mt_cb]
        #
        # mud_checked = any(checkbox.isChecked() for checkbox in mud_cbs)
        #
        # twophase_cbs = [
        #     self.dlg.cfe_cb,
        #     self.dlg.cfd_cb,
        #     self.dlg.cfs_cb,
        #     self.dlg.cfe_cb,
        #     self.dlg.cfd_cb,
        #     self.dlg.cfs_cb,
        #     self.dlg.cme_cb,
        #     self.dlg.cmd_cb,
        #     self.dlg.cms_cb,
        #     self.dlg.ce_cb,
        #     self.dlg.ct_cb,
        # ]
        #
        # twophase_checked = any(checkbox.isChecked() for checkbox in twophase_cbs)
        #
        # risk_cbs = [self.dlg.hr_cb]
        #
        # risk_checked = any(checkbox.isChecked() for checkbox in risk_cbs)
        #
        # group_names = {
        #     "Flood Maps": flood_checked,
        #     "Mudflow Maps": mud_checked,
        #     "Two-phase Maps": twophase_checked,
        #     "Risk Maps": risk_checked,
        # }
        #
        # for name, checked in group_names.items():
        #     if checked:
        #         if not mapping_group.findGroup(name):
        #             mapping_group.addGroup(name)

    def check_checkboxes(self):
        """Function to check if at least one map checkbox was checked"""
        checkboxes = [
            self.dlg.hr_cb,
            self.dlg.fs_cb,
            self.dlg.fd_cb,
            self.dlg.ft_cb,
            self.dlg.fe_cb,
            self.dlg.me_cb,
            self.dlg.md_cb,
            self.dlg.ms_cb,
            self.dlg.mt_cb,
            self.dlg.ce_cb,
            self.dlg.ct_cb,
            self.dlg.cfe_cb,
            self.dlg.cfd_cb,
            self.dlg.cfs_cb,
            self.dlg.cfe_cb,
            self.dlg.cfd_cb,
            self.dlg.cfs_cb,
            self.dlg.cme_cb,
            self.dlg.cmd_cb,
            self.dlg.cms_cb,
        ]

        none_checked = not any(checkbox.isChecked() for checkbox in checkboxes)

        # if none_checked:
        #     msg_box = QMessageBox()
        #     msg_box.setIcon(QMessageBox.Warning)
        #     msg_box.setWindowTitle("Warning")
        #     msg_box.setText("Check at least one map option!")
        #     msg_box.exec_()
        #     return False
        # else:
        #     return True

    def run_open_layout(self):
        """Function to open the selected layout"""

        map_title = self.dlg.map_title_le.text()
        map_description = self.dlg.map_description.toPlainText()
        layer_extent = self.dlg.layer_extent_cb.currentLayer()

        lm = QgsProject.instance().layoutManager()
        l = QgsPrintLayout(QgsProject.instance())
        l.initializeDefaults()

        script_directory = os.path.dirname(os.path.realpath(__file__))
        template_directory = script_directory + r"/layout_templates"
        template_source = ""
        if self.dlg.a4_land.isChecked():
            template_source = template_directory + r"/FLO-2D A4 Landscape.qpt"
            layout_name = self.layout_exists("FLO-2D A4 Landscape")

        if self.dlg.a4_port.isChecked():
            template_source = template_directory + r"/FLO-2D A4 Portrait.qpt"
            layout_name = self.layout_exists("FLO-2D A4 Portrait")

        if self.dlg.a3_land.isChecked():
            template_source = template_directory + r"/FLO-2D A3 Landscape.qpt"
            layout_name = self.layout_exists("FLO-2D A3 Landscape")

        if self.dlg.a3_port.isChecked():
            template_source = template_directory + r"/FLO-2D A3 Portrait.qpt"
            layout_name = self.layout_exists("FLO-2D A3 Portrait")

        if template_source == "":
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Please, select a layout.")
            msg.exec_()
            return

        # template_source = template_directory + r"/FLO-2D A4 Landscape.qpt"

        template_file = open(template_source, "r+", encoding="utf-8")
        template_content = template_file.read()
        template_file.close()
        document = QDomDocument()
        document.setContent(template_content)
        context = QgsReadWriteContext()
        l.loadFromTemplate(document, context)

        l.setName(layout_name)

        # canvas = self.iface.mapCanvas()
        for item in l.items():
            # QgsMessageLog.logMessage(str(item))
            if item.type() == 65639:  # Map
                item.zoomToExtent(layer_extent.extent())
            if item.type() == 65641:  # Label
                item.setText(item.text().replace("{{title}}", map_title))
                item.setText(item.text().replace("{{description}}", map_description))

        # Add layout to layout manager
        l.refresh()
        lm.addLayout(l)

        # Open and show the layout in designer
        # try:
        self.iface.openLayoutDesigner(l)
        # except:
        #     msg = QMessageBox()
        #     msg.setIcon(QMessageBox.Warning)
        #     msg.setText(self.tr(
        #         f'Error trying to open the layout ({l.name()}) returned errors.'
        #             ))
        #     msg.exec_()

    def layout_exists(self, layout_name):
        """Check if a layout already exists and return a correct name"""
        lm = QgsProject.instance().layoutManager()
        layouts = []
        n_layouts = 0
        for l in lm.layouts():
            layouts.append(l.name())
        if layout_name in layouts:
            n_layouts = sum(layout_name in s for s in layouts)

        if n_layouts == 0:
            return layout_name
        else:
            return layout_name + f" ({n_layouts})"

    def check_cw(self):
        """
        Function to check all available flood maps
        """
        flood_rbs = [
            self.dlg.ge_cw_cb,
            self.dlg.md_cw_cb,
            self.dlg.mv_cw_cb,
            self.dlg.mwse_cw_cb,
            self.dlg.fd_cw_cb,
            self.dlg.fv_cw_cb,
            self.dlg.dv_cw_cb,
            self.dlg.t1ft_cw_cb,
            self.dlg.t2ft_cw_cb,
            self.dlg.tmax_cw_cb,
            self.dlg.cd_cw_cb,
            self.dlg.cv_cw_cb,
            self.dlg.fcd_cw_cb,
            self.dlg.fcv_cw_cb,
            self.dlg.ld_cw_cb,
            self.dlg.se_cw_cb,
            self.dlg.sp_cw_cb,
        ]

        if self.dlg.check_cw_cb.isChecked():
            for cb in flood_rbs:
                if cb.isEnabled():
                    cb.setChecked(True)
                else:
                    cb.setChecked(False)
        else:
            for cb in flood_rbs:
                cb.setChecked(False)

    def check_mf(self):
        """
        Function to check all available mudflow maps
        """
        mudflow_rbs = [
            self.dlg.ge_mf_cb,
            self.dlg.md_mf_cb,
            self.dlg.mv_mf_cb,
            self.dlg.mwse_mf_cb,
            self.dlg.fd_mf_cb,
            self.dlg.fv_mf_cb,
            self.dlg.dv_mf_cb,
            self.dlg.t1ft_mf_cb,
            self.dlg.t2ft_mf_cb,
            self.dlg.tmax_mf_cb,
            self.dlg.cd_mf_cb,
            self.dlg.cv_mf_cb,
            self.dlg.fcd_mf_cb,
            self.dlg.fcv_mf_cb,
            self.dlg.ld_mf_cb,
            self.dlg.se_mf_cb,
            self.dlg.sp_mf_cb,
            self.dlg.ms_mf_cb,
            self.dlg.fs_mf_cb,
        ]

        if self.dlg.check_mf_cb.isChecked():
            for cb in mudflow_rbs:
                if cb.isEnabled():
                    cb.setChecked(True)
                else:
                    cb.setChecked(False)
        else:
            for cb in mudflow_rbs:
                cb.setChecked(False)

    def check_tp(self):
        """
        Function to check all available twophase maps
        """
        twophase_rbs = [
            self.dlg.ge_tp_cb,
            self.dlg.mfd_tp_cb,
            self.dlg.mmd_tp_cb,
            self.dlg.cmd_tp_cb,
            self.dlg.mfv_tp_cb,
            self.dlg.mmv_tp_cb,
            self.dlg.mfsc_tp_cb,
            self.dlg.mmsc_tp_cb,
            # self.dlg.ffsc_tp_cb,
            self.dlg.fmsc_tp_cb,
            self.dlg.mwse_mf_cb,
            self.dlg.ffd_tp_cb,
            self.dlg.fmd_tp_cb,
            self.dlg.fcd_tp_cb,
            self.dlg.ffv_tp_cb,
            self.dlg.fmv_tp_cb,
            self.dlg.dv_tp_cb,
            self.dlg.t1ft_tp_cb,
            self.dlg.t2ft_tp_cb,
            self.dlg.tmax_tp_cb,
            self.dlg.mchd_tp_cb,
            self.dlg.mchv_tp_cb,
            self.dlg.fchd_tp_cb,
            self.dlg.fchv_tp_cb,
            self.dlg.ld_tp_cb,
            self.dlg.se_tp_cb,
            self.dlg.sp_tp_cb,
        ]

        if self.dlg.check_tp_cb.isChecked():
            for cb in twophase_rbs:
                if cb.isEnabled():
                    cb.setChecked(True)
                else:
                    cb.setChecked(False)
        else:
            for cb in twophase_rbs:
                cb.setChecked(False)
