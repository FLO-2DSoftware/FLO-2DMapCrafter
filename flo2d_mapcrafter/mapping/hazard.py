# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FLO2DMapCrafter
                                 A QGIS plugin
 This plugin creates maps from FLO-2D output files.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-09-21
        git sha              : $Format:%H$
        copyright            : (C) 2023 by FLO-2D
        email                : contact@flo-2d.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from PyQt5.QtWidgets import QMessageBox
from qgis._core import QgsProject, QgsRasterLayer, QgsUnitTypes

from flo2d_mapcrafter.mapping.scripts import read_ASCII, remove_layer, set_raster_style

import processing

class HazardMaps():

    def check_hazard_files(self, output_dir):
        """
        Function to check the hazard maps that can be created
        """

        hazard_maps = {
            "ARR": False,
            "Austrian": False,
            "FLO-2D": False,
            "Swiss": False,
            "UK": False,
            "USBR": False,
            "FEMA": False
        }

        # Australian Rainfall and Runoff (ARR)
        arr_files = {
            r"DEPTH.OUT": False,
            r"VELFP.OUT": False,
            r"VEL_X_DEPTH.OUT": False
        }

        # SWISS FLOOD INTENSITY
        swiss_files = {
            r"DEPTH.OUT": False,
            r"VEL_X_DEPTH.OUT": False
        }

        files = os.listdir(output_dir)
        for file in files:
            for key, value in arr_files.items():
                if file.startswith(key):
                    arr_files[key] = True
            for key, value in swiss_files.items():
                if file.startswith(key):
                    swiss_files[key] = True

        # ARR Check if all files are true
        if all(value for value in arr_files.values()):
            hazard_maps["ARR"] = True

        # SWISS Check if all files are true
        if all(value for value in arr_files.values()):
            hazard_maps["Swiss"] = True

        return hazard_maps

    def create_maps(self, hazard_rbs, flo2d_results_dir, map_output_dir, mapping_group, crs):
        """
        Function to create the maps
        """

        if any(value for value in hazard_rbs.values()):

            mapping_group_name = "Hazard Maps"

            if mapping_group.findGroup(mapping_group_name):
                mapping_group = mapping_group.findGroup(mapping_group_name)
            else:
                mapping_group = mapping_group.insertGroup(0, mapping_group_name)

            vector_style_directory = os.path.dirname(os.path.realpath(__file__))[:-8] + r"\vector_styles"
            raster_style_directory = os.path.dirname(os.path.realpath(__file__))[:-8] + r"\raster_styles"

            # ARR
            if hazard_rbs.get("ARR"):
                hydro_risk = map_output_dir + r"\ARR_FLOOD_HAZARD.tif"
                depth_file = flo2d_results_dir + r"\DEPTH.OUT"
                vel_file = flo2d_results_dir + r"\VELFP.OUT"
                vel_x_depth_file = flo2d_results_dir + r"\VEL_X_DEPTH.OUT"

                hydro_risk_raster = self.create_arr_map(
                    map_output_dir, hydro_risk, depth_file, vel_file, vel_x_depth_file, crs
                )

                QgsProject.instance().addMapLayer(hydro_risk_raster, False)
                set_raster_style(hydro_risk_raster, 2)

                mapping_group.insertLayer(0, hydro_risk_raster)


    def create_arr_map(
        self, map_output_dir, hydro_risk, depth_file, vel_file, vel_x_depth_file, crs
    ):
        """Create the ARR hydrodynamic risk map"""

        # Check flood depth and flow speed files
        flow_speed = map_output_dir + r"\FLOW_SPEED.tif"
        flood_depth = map_output_dir + r"\FLOOD_DEPTH.tif"
        h_x_v = map_output_dir + r"\HxV.tif"

        if os.path.isfile(flood_depth):
            depth_layer = QgsProject.instance().addMapLayer(QgsRasterLayer(flood_depth, "FLOOD_DEPTH"), True)
        else:
            read_ASCII(depth_file, flood_depth, "FLOOD_DEPTH", crs)

        if os.path.isfile(flow_speed):
            vel_layer = QgsProject.instance().addMapLayer(QgsRasterLayer(flow_speed, "FLOW_SPEED"), True)
        else:
            read_ASCII(vel_file, flow_speed, "FLOW_SPEED", crs)

        if os.path.isfile(h_x_v):
            hxv_layer = QgsProject.instance().addMapLayer(QgsRasterLayer(h_x_v, "HxV"), True)
        else:
            read_ASCII(vel_x_depth_file, h_x_v, "HxV", crs)

        if os.path.isfile(hydro_risk):
            try:
                remove_layer("ARR_FLOOD_HAZARD")
                os.remove(hydro_risk)
            except OSError as e:
                print(f"Error deleting {hydro_risk}: {str(e)}")

        # adjust units
        if crs.mapUnits() == QgsUnitTypes.DistanceMeters:
            uc = 1
        else:
            uc = 3.28

        r1_e = f'"HxV@1" <= {0.3 * uc} AND "FLOOD_DEPTH@1" < {0.3 * uc} AND "FLOW_SPEED@1" < {2 * uc}'
        r2_e = f'"HxV@1" <= {0.6 * uc} AND "FLOOD_DEPTH@1" < {0.5 * uc} AND "FLOW_SPEED@1" < {2 * uc}'
        r3_e = f'"HxV@1" <= {0.6 * uc} AND "FLOOD_DEPTH@1" < {1.2 * uc} AND "FLOW_SPEED@1" < {2 * uc}'
        r4_e = f'"HxV@1" <= {1.0 * uc} AND "FLOOD_DEPTH@1" < {2.0 * uc} AND "FLOW_SPEED@1" < {2 * uc}'
        r5_e = f'"HxV@1" <= {4.0 * uc} AND "FLOOD_DEPTH@1" < {4.0 * uc} AND "FLOW_SPEED@1" < {4 * uc}'
        r6_e = f'"HxV@1" > {4.0 * uc} OR "FLOOD_DEPTH@1" >= {4.0 * uc} OR "FLOW_SPEED@1" >= {4 * uc}'

        # Australian Rainfall and Runoff Classification
        arr_class = processing.run(
            "qgis:rastercalculator",
            {
                "EXPRESSION": f"IF({r1_e},1,if({r2_e},2,if({r3_e},3,if({r4_e},4,if({r5_e},5,if({r6_e},6,0))))))",
                "LAYERS": [flood_depth],
                "CELLSIZE": 0,
                "EXTENT": None,
                "CRS": crs,
                "OUTPUT": hydro_risk,
            },
        )["OUTPUT"]

        remove_layer("FLOOD_DEPTH")
        remove_layer("FLOW_SPEED")
        remove_layer("HxV")

        return QgsRasterLayer(arr_class, "ARR_FLOOD_HAZARD")
